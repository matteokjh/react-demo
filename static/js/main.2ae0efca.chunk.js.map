{"version":3,"sources":["logo.svg","ticTacToe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Square","props","react_default","a","createElement","className","onClick","value","Board","i","_this","this","squares","renderSquare","React","Component","calculateWinner","lines","length","_lines$i","Object","slicedToArray","b","c","Game","_this2","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","history","Array","fill","xIsNext","stepNumber","step","setState","slice","concat","status","_this3","cur","winner","moves","map","s","m","desc","key","jumpTo","ticTacToe_Board","handleClick","App","src","logo","alt","src_ticTacToe","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2ae0efca.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './ticTacToe.css';\r\n// 对着教程打的九宫格井字棋游戏\r\n// react first demo\r\nfunction Square(props){ // 每一个小方格\r\n    return (\r\n        <button className='square' onClick={props.onClick}>\r\n            {props.value}\r\n        </button>\r\n    )\r\n}\r\n\r\nclass Board extends React.Component { // 棋盘\r\n    renderSquare(i) {\r\n        return (\r\n            <Square \r\n                value={this.props.squares[i]}\r\n                onClick={\r\n                    ()=>{\r\n                        this.props.onClick(i)\r\n                    }\r\n                }\r\n            />\r\n        )\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='board-row'>\r\n                    {this.renderSquare(0)}\r\n                    {this.renderSquare(1)}\r\n                    {this.renderSquare(2)}\r\n                </div>\r\n                <div className='board-row'>\r\n                    {this.renderSquare(3)}\r\n                    {this.renderSquare(4)}\r\n                    {this.renderSquare(5)}\r\n                </div>\r\n                <div className='board-row'>\r\n                    {this.renderSquare(6)}\r\n                    {this.renderSquare(7)}\r\n                    {this.renderSquare(8)}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass Game extends React.Component { // 游戏wrapper\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            history: [\r\n                {\r\n                    squares: Array(9).fill(null)\r\n                }\r\n            ],\r\n            xIsNext: true,\r\n            stepNumber: 0\r\n        }\r\n    }\r\n    jumpTo(step){ // 跳转事件，这个函数不改变历史\r\n        this.setState({\r\n            stepNumber: step, // 跳到指定步\r\n            xIsNext: (step % 2) === 0 // 奇数步为X(偶数步的下一步)\r\n        })\r\n    }\r\n    handleClick(i){ // 具体每个格子点击事件，会更新所有信息\r\n        const history = this.state.history.slice(0,this.state.stepNumber+1); // 走过的路径\r\n        const cur = history[history.length - 1]; // 当前路径\r\n        const squares = cur.squares.slice(); // 当前路径数值集合\r\n        if(calculateWinner(squares) || squares[i]){ // 如果出了winner或者该格被点过\r\n            return;\r\n        }\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O'; // 下一步轮到谁\r\n        this.setState({\r\n            history: history.concat([{    // 加进历史\r\n                squares: squares,\r\n            }]),\r\n            stepNumber: history.length, // 更新当前累计步长\r\n            xIsNext: !this.state.xIsNext,\r\n        })\r\n    }\r\n    render() {\r\n        const history = this.state.history; // 更新历史步骤        \r\n        const cur = history[this.state.stepNumber]; // 如果触发了jumpTo，当前记录的最新历史会根据jumpTo改变的stepNumber变化\r\n        const winner = calculateWinner(cur.squares) // 结出冠军\r\n        const moves = history.map((s,m)=>{ // 根据历史，生成模板，渲染出来并挂上点击事件；\r\n            const desc = m ? \r\n                'Go to move #' + m :\r\n                'Go to game start';\r\n            return (\r\n                <li key={m}>\r\n                    <button onClick={()=> this.jumpTo(m)}>\r\n                        {desc}\r\n                    </button>\r\n                </li>\r\n            )\r\n        })\r\n        let status;\r\n        if(winner){ // 提示文字\r\n            status = 'Winner: ' + winner;\r\n        }else {\r\n            status = 'Next player: ' + (this.state.xIsNext ? 'X': 'O')\r\n        }\r\n        return (\r\n            <div className='game'>\r\n                <p>井字棋</p>\r\n                <div className='game-board'>\r\n                    <Board\r\n                        squares = {cur.squares}\r\n                        onClick = {(i)=>this.handleClick(i)}\r\n                    />\r\n                </div>\r\n                <div className='game-info'>\r\n                    <div>{status}</div>\r\n                    <ol>{moves}</ol>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction calculateWinner(squares) { // 冠军函数\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return squares[a];\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\nexport default Game","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Game from './ticTacToe'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>first react-demo</p>\n      </header>\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}